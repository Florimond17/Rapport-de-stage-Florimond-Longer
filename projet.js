// === VARIABLES GLOBALES ===
let isScrolling = false;
let isGalleryPaused = false;
let gallerySpeed = 1;
const sections = document.querySelectorAll('.content-section');
const quickLinks = document.querySelectorAll('.quick-link');

// Donn√©es pour les modales des r√©alisations
const missionData = {
    1: {
        title: "üèóÔ∏è Accueil candidat",
        content: `
            <div class="modal-details">
                <p>L'accueil candidat √©tait une partie importante de chaque journ√©e en tant qu‚Äôadmisseur. En effet, il s‚Äôagissait du premier contact entre l‚Äô√©cole et les candidats,
                 et il √©tait essentiel de cr√©er une atmosph√®re chaleureuse et rassurante afin de leur permettre de vivre une exp√©rience positive d√®s leur arriv√©e. 
                 Cela impliquait d‚Äô√™tre ponctuel, souriant, disponible pour r√©pondre aux questions, et capable de transmettre l‚Äôimage dynamique et accueillante de l‚Äô√©tablissement.</p>
                
                <div class="achievement-highlights">
                    <div class="highlight">
                        <strong>organisation mise en place :</strong>
                        <span>Chaque membre de l'√©quipe logistique √©tait affili√© a une tache, et nous changions de poste tout les matins :</span>
                            <ul>
                                <li>Aller chercher les candidats a la gare.</li>
                                <li>S'occuper de L'accueil a l'ext√©rieur de l'√©tablissement afin de converg√© tout les candidat dans le hall B.</li>
                                <li>Accueil int√©rieur pour guid√© les candidats dans la proc√©dure d'enregistrement et leur donn√©es des informations sur les potentiel questions.</li>
                                <li>Scanner les QR code qui justifiait la dit pr√©sence du candidat pour la journ√©e.</li>
                                <li>Le stand informations pour l'explication du d√©roulement de la journ√©e.</li>
                                <li>Le stand petit d√©jeuner, qui √©tait mis en place pour d√©tendre les candidats et discuter avec eux.</li>
                                <li>Le volant cette personne √©tait la en renfort si au autre poste avait besoin d'aide du a un sur nombre de candidats</li>
                            </ul>
                    </div>
                    <div class="highlight">
                        <strong>Dur√©e :</strong>
                        <span>tout les matins de 9 h √† 12 h</span>
                    </div>
                    <div class="highlight">
                        <strong>R√©sultat :</strong>
                        <span>Des avis positifs et une journ√©e inoubliable pour chaque candidats.</span>
                    </div>
                </div>
                
                <div class="technical-details">
                    <h5>D√©fis relev√©s :</h5>
                    <ul>
                        <li>Ne pas perdre et oubli√© des candidats a la gare.</li>
                        <li>G√©rer les candidats en retard ou perdu.</li>
                        <li>Prise en charges des parents.</li>
                        <li>Les faire patienter en attendant l'arriv√© de tout le monde pour commencer la journ√©e.</li>
                    </ul>
                </div>
            </div>
        `
    },
    2: {
        title: "üíª Conseil",
        content: `
            <div class="modal-details">
                <p>L‚Äôun des aspects les plus importants du r√¥le des admisseurs r√©side dans l‚Äôaccompagnement des candidats, au-del√† de la simple logistique de la journ√©e. Ce r√¥le peut survenir √† tout moment, souvent de mani√®re spontan√©e, au d√©tour d‚Äôune conversation avec un admissible.
                    Il s‚Äôagit d‚Äôun moment d√©licat, car il implique d‚Äôentrer, parfois sans s‚Äôy attendre, dans une certaine forme d‚Äôintimit√© avec le candidat. Ce dernier exprime souvent ses doutes, ses h√©sitations, et cherche avant tout un regard bienveillant ou un conseil rassurant.
                    Toute la difficult√© r√©side alors dans l‚Äô√©quilibre √† trouver : il ne s‚Äôagit pas de l‚Äôinfluencer ou de prendre une d√©cision √† sa place, mais de lui offrir un espace d‚Äô√©coute, de l‚Äôaider √† formuler ses propres r√©flexions, et de lui pr√©senter de mani√®re neutre et objective les diff√©rentes options qui s‚Äôoffrent √† lui.
                    Dans ces √©changes, l‚Äôadmisseur devient un v√©ritable point d‚Äôappui temporaire. Ce r√¥le demande de la sensibilit√©, de la discr√©tion et une grande capacit√© d‚Äôadaptation pour r√©pondre √† des situations parfois tr√®s personnelles, tout en restant fid√®le √† une posture de neutralit√©.</p>
                
                <div class="technical-details">
                    <h5>exemples de conseil que j'ai rencontrer :</h5>
                    <ul>
                        <li>Une √©tudiante m‚Äôa confi√© avoir grandi dans un milieu o√π l‚Äôon lui avait toujours enseign√© que seule une classe pr√©paratoire √©tait une voie possible pour son avenir.
                            Elle m‚Äôa avou√© ne pas se sentir capable d‚Äôen suivre une, c‚Äôest pourquoi elle se retrouvait √† passer les concours post-bac.
                            Je ne pouvais pas donner mon avis sur la question, car cela aurait pu influencer son choix. Je lui ai donc pr√©sent√© des exemples concrets des deux parcours qui s‚Äôoffraient √† elle : soit elle int√©grait une pr√©pa pour ensuite rejoindre une grande √©cole via les admissions parall√®les, soit elle choisissait directement une formation post-bac, ce qui lui permettrait de vivre d'autres exp√©riences tout en avan√ßant dans son parcours.
                            √Ä la fin de notre conversation, je l‚Äôai sentie plus confiante et elle semblait avoir fait un pas vers la d√©cision qui lui correspondait le mieux.</li>
                        <li>Un autre exemple fr√©quent que j‚Äôai rencontr√© au cours de mes journ√©es en tant qu‚Äôadmisseur concerne les candidats h√©sitant entre plusieurs √©coles du concours SESAME. L‚Äôun d‚Äôeux, par exemple, doutait entre deux √©tablissements et me demandait mon avis pour l‚Äôaider √† trancher.
                            Dans ce type de situation, mon r√¥le est de valoriser NEOMA sans jamais d√©nigrer les autres √©coles. Il est essentiel de rester professionnel et objectif, tout en mettant en avant les points forts de mon √©tablissement.
                            Pour cela, je prends le temps d‚Äô√©couter le candidat, de comprendre ce qui le motive, ce qu‚Äôil recherche dans une √©cole, et quelles sont ses priorit√©s (vie associative, sp√©cialisation, ouverture √† l‚Äôinternational, ambiance, etc.).
                            Une fois ses attentes identifi√©es, je peux mieux cibler les √©l√©ments de l‚Äôoffre NEOMA qui pourraient y r√©pondre, en lui pr√©sentant les sp√©cificit√©s du programme, les opportunit√©s √† l‚Äô√©tranger, ou encore la richesse de la vie √©tudiante.
                            Cet √©change permet souvent au candidat de mieux se projeter, tout en lui laissant la libert√© de faire un choix √©clair√©, bas√© sur ses propres crit√®res.</li>
                    </ul>
                </div>
            </div>
        `
    },
    3: {
        title: "‚öôÔ∏è Vente",
        content: `
            <div class="modal-details">
                <p>En tant qu‚Äôadmisseur chez NEOMA, l‚Äôune des missions principales est de repr√©senter l‚Äô√©cole et de contribuer √† sa promotion aupr√®s des candidats admissibles. Cela implique une v√©ritable posture de "vente", dans le sens noble du terme : il s‚Äôagit de valoriser l‚Äô√©tablissement, ses programmes, ses valeurs et son environnement, tout en r√©pondant aux attentes sp√©cifiques des candidats.
                    Cette mission demande de bien conna√Ætre les atouts de NEOMA (international, excellence acad√©mique, vie associative, r√©seau d‚Äôalumni, etc.) afin de les mettre en avant de mani√®re adapt√©e √† chaque profil. Elle repose sur une √©coute active : comprendre les motivations, les doutes ou les objectifs d‚Äôun candidat permet de mieux orienter le discours et de montrer en quoi NEOMA peut r√©pondre √† ses ambitions.
                    L‚Äôobjectif n‚Äôest pas de convaincre √† tout prix, mais de donner envie, d‚Äô√©clairer les choix, et surtout de transmettre une image authentique et positive de l‚Äô√©cole. Dans ce cadre, l‚Äôadmisseur devient un v√©ritable ambassadeur, jouant un r√¥le-cl√© dans l‚Äôattractivit√© de NEOMA.
                </p>

                 <div class="technical-details">
                    <h5>Connaisance essentiel :</h5>
                    <ul>
                        <li>Le programme BBA voie G√©n√©rale et la voie Doubles diplomes</li>
                        <li>Le programme TEMA avec ces sp√©cificit√©s et des d√©bouch√©s</li>
                        <li>Des diff√©rentes associations</li>
                        <li>De l'influence de l'√©cole et des diff√©rentes services quelle propose </li>
                    </ul>
                </div>
            </div>
        `
    },
    4: {
        title: "S√©curit√© & Tests",
        content: `
            <div class="modal-details">
                <h4>üîí S√©curisation et Qualit√©</h4>
                <p>Impl√©mentation des meilleures pratiques de s√©curit√© et mise en place d'une suite de tests compl√®te pour garantir la fiabilit√© du syst√®me.</p>
                
                <div class="achievement-highlights">
                    <div class="highlight">
                        <strong>Technologies utilis√©es :</strong>
                        <span>Jest, Cypress, Helmet, bcrypt</span>
                    </div>
                    <div class="highlight">
                        <strong>Dur√©e :</strong>
                        <span>2 mois</span>
                    </div>
                    <div class="highlight">
                        <strong>R√©sultat :</strong>
                        <span>Couverture de tests > 90%, S√©curit√© OWASP</span>
                    </div>
                </div>
                
                <div class="technical-details">
                    <h5>Mesures impl√©ment√©es :</h5>
                    <ul>
                        <li>Tests unitaires et d'int√©gration automatis√©s</li>
                        <li>Chiffrement des donn√©es sensibles</li>
                        <li>Protection contre les attaques OWASP Top 10</li>
                        <li>Audit de s√©curit√© et penetration testing</li>
                    </ul>
                </div>
            </div>
        `
    },
    5: {
        title: "D√©ploiement & CI/CD",
        content: `
            <div class="modal-details">
                <h4>üöÄ Infrastructure et Automatisation</h4>
                <p>Mise en place d'une infrastructure cloud scalable avec pipeline de d√©ploiement automatis√©. Configuration de monitoring et alertes pour assurer la disponibilit√©.</p>
                
                <div class="achievement-highlights">
                    <div class="highlight">
                        <strong>Technologies utilis√©es :</strong>
                        <span>AWS, Docker, GitHub Actions, Nginx</span>
                    </div>
                    <div class="highlight">
                        <strong>Dur√©e :</strong>
                        <span>2 mois</span>
                    </div>
                    <div class="highlight">
                        <strong>R√©sultat :</strong>
                        <span>D√©ploiement automatis√© avec 99.9% uptime</span>
                    </div>
                </div>
                
                <div class="technical-details">
                    <h5>Infrastructure mise en place :</h5>
                    <ul>
                        <li>Conteneurisation compl√®te avec Docker</li>
                        <li>Pipeline CI/CD avec tests automatis√©s</li>
                        <li>Load balancing et auto-scaling</li>
                        <li>Sauvegarde automatique et disaster recovery</li>
                    </ul>
                </div>
            </div>
        `
    },
    6: {
        title: "Analytics & Monitoring",
        content: `
            <div class="modal-details">
                <h4>üìä Surveillance et Optimisation</h4>
                <p>Impl√©mentation d'un syst√®me complet de monitoring et d'analytics pour suivre les performances, d√©tecter les probl√®mes et optimiser l'exp√©rience utilisateur.</p>
                
                <div class="achievement-highlights">
                    <div class="highlight">
                        <strong>Technologies utilis√©es :</strong>
                        <span>Grafana, Prometheus, Google Analytics, Sentry</span>
                    </div>
                    <div class="highlight">
                        <strong>Dur√©e :</strong>
                        <span>2 mois</span>
                    </div>
                    <div class="highlight">
                        <strong>R√©sultat :</strong>
                        <span>Dashboard temps r√©el avec alertes automatiques</span>
                    </div>
                </div>
                
                <div class="technical-details">
                    <h5>M√©triques surveill√©es :</h5>
                    <ul>
                        <li>Performance et temps de r√©ponse</li>
                        <li>Utilisation des ressources syst√®me</li>
                        <li>Comportement utilisateur et conversion</li>
                        <li>D√©tection proactive des erreurs</li>
                    </ul>
                </div>
            </div>
        `
    }
};

// === INITIALISATION ===
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Initialisation de la page Mon Projet Personnel...');
    
    initializeQuickNavigation();
    initializeScrollAnimations();
    initializeStatCounters();
    initializeMobileMenu();
    initializeHeaderScroll();
    initializeRealisationCards();
    initializeCircularGallery();
    initializeModalSystem();
    initializeParallaxEffects();
    initializeAccessibility();
    
    console.log('‚úÖ Page initialis√©e avec succ√®s !');
});

// === NAVIGATION RAPIDE ===
function initializeQuickNavigation() {
    quickLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            
            quickLinks.forEach(l => l.classList.remove('active'));
            this.classList.add('active');
            
            const targetId = this.getAttribute('href');
            const targetElement = document.querySelector(targetId);
            
            if (targetElement) {
                const headerHeight = document.querySelector('.header').offsetHeight;
                const quickNavHeight = document.querySelector('.quick-nav').offsetHeight;
                const offset = headerHeight + quickNavHeight + 20;
                
                const targetPosition = targetElement.offsetTop - offset;
                
                window.scrollTo({
                    top: targetPosition,
                    behavior: 'smooth'
                });
            }
        });
    });
}

// === MISE √Ä JOUR DE LA NAVIGATION ACTIVE ===
function updateActiveNavigation() {
    if (isScrolling) return;
    
    const scrollPosition = window.scrollY;
    const headerHeight = document.querySelector('.header').offsetHeight;
    const quickNavHeight = document.querySelector('.quick-nav').offsetHeight;
    const offset = headerHeight + quickNavHeight + 100;
    
    sections.forEach((section) => {
        const sectionTop = section.offsetTop - offset;
        const sectionBottom = sectionTop + section.offsetHeight;
        
        if (scrollPosition >= sectionTop && scrollPosition < sectionBottom) {
            quickLinks.forEach(link => link.classList.remove('active'));
            const correspondingLink = document.querySelector(`a[href="#${section.id}"]`);
            if (correspondingLink) {
                correspondingLink.classList.add('active');
            }
        }
    });
}

// === ANIMATIONS AU SCROLL ===
function initializeScrollAnimations() {
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('animate-in');
            }
        });
    }, {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    });
    
    const animatedElements = document.querySelectorAll(
        '.description-creative, .objectives-pyramid, .realisations-grid, .difficulties-compact, .trajectory-card, .circular-gallery'
    );
    
    animatedElements.forEach(el => {
        observer.observe(el);
    });
}

// === COMPTEURS ANIM√âS ===
function initializeStatCounters() {
    const statNumbers = document.querySelectorAll('.stat-number');
    
    const animateCounter = (element, target, duration = 2000) => {
        let start = 0;
        const increment = target / (duration / 16);
        
        const timer = setInterval(() => {
            start += increment;
            if (start >= target) {
                element.textContent = target.toString();
                clearInterval(timer);
            } else {
                element.textContent = Math.floor(start).toString();
            }
        }, 16);
    };
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const numberElement = entry.target;
                if (!numberElement.classList.contains('animated')) {
                    numberElement.classList.add('animated');
                    const originalText = numberElement.textContent;
                    const number = parseInt(originalText);
                    
                    if (!isNaN(number)) {
                        numberElement.textContent = '0';
                        setTimeout(() => {
                            animateCounter(numberElement, number);
                        }, 200);
                    }
                }
            }
        });
    }, { threshold: 0.5 });
    
    statNumbers.forEach(stat => observer.observe(stat));
}

// === HEADER AU SCROLL ===
function initializeHeaderScroll() {
    const header = document.querySelector('.header');
    let lastScrollY = window.scrollY;
    
    window.addEventListener('scroll', throttle(() => {
        const currentScrollY = window.scrollY;
        
        if (currentScrollY > 100) {
            header.classList.add('scrolled');
        } else {
            header.classList.remove('scrolled');
        }
        
        if (currentScrollY > lastScrollY && currentScrollY > 200) {
            header.style.transform = 'translateY(-100%)';
        } else {
            header.style.transform = 'translateY(0)';
        }
        
        lastScrollY = currentScrollY;
        updateActiveNavigation();
    }, 100));
}

// === CARTES DE R√âALISATIONS INTERACTIVES ===
function initializeRealisationCards() {
    const realisationCards = document.querySelectorAll('.realisation-card');
    
    realisationCards.forEach(card => {
        card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-10px) scale(1.05)';
            this.style.boxShadow = '0 20px 40px rgba(0, 130, 195, 0.3)';
        });
        
        card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) scale(1)';
            this.style.boxShadow = '0 10px 25px rgba(0, 0, 0, 0.1)';
        });
        
        card.addEventListener('click', function() {
            const missionId = this.getAttribute('data-mission');
            openMissionModal(missionId);
        });
    });
}

// === SYST√àME DE MODALES ===
function initializeModalSystem() {
    const modal = document.getElementById('missionModal');
    const closeBtn = document.querySelector('.modal-close');
    
    closeBtn.addEventListener('click', closeMissionModal);
    
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            closeMissionModal();
        }
    });
    
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && modal.classList.contains('active')) {
            closeMissionModal();
        }
    });
}

function openMissionModal(missionId) {
    const modal = document.getElementById('missionModal');
    const modalTitle = document.getElementById('modalTitle');
    const modalContent = document.getElementById('modalContent');
    
    const mission = missionData[missionId];
    if (mission) {
        modalTitle.textContent = mission.title;
        modalContent.innerHTML = mission.content;
        
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
        
        // Animation d'entr√©e
        setTimeout(() => {
            modal.querySelector('.modal-content').style.transform = 'translate(-50%, -50%) scale(1)';
            modal.querySelector('.modal-content').style.opacity = '1';
        }, 10);
    }
}

function closeMissionModal() {
    const modal = document.getElementById('missionModal');
    const modalContentEl = modal.querySelector('.modal-content');
    
    modalContentEl.style.transform = 'translate(-50%, -50%) scale(0.9)';
    modalContentEl.style.opacity = '0';
    
    setTimeout(() => {
        modal.classList.remove('active');
        document.body.style.overflow = 'auto';
    }, 300);
}

// JavaScript pour la galerie circulaire
class CircularGallery {
    constructor() {
        this.gallery = document.getElementById('circularGallery');
        this.items = document.querySelectorAll('.gallery-item');
        this.indicators = document.querySelectorAll('.indicator');
        this.prevBtn = document.getElementById('prevBtn');
        this.nextBtn = document.getElementById('nextBtn');
        
        this.currentIndex = 0;
        this.totalItems = this.items.length;
        this.isAnimating = false;
        this.autoRotateInterval = null;
        this.autoRotateDelay = 4000; // 4 secondes
        
        this.init();
    }
    
    init() {
        this.setupEventListeners();
        this.updateGallery();
        this.startAutoRotate();
        
        // Pause auto-rotation on hover
        this.gallery.addEventListener('mouseenter', () => this.pauseAutoRotate());
        this.gallery.addEventListener('mouseleave', () => this.startAutoRotate());
    }
    
    setupEventListeners() {
        // Boutons de navigation
        this.prevBtn.addEventListener('click', () => this.previousItem());
        this.nextBtn.addEventListener('click', () => this.nextItem());
        
        // Indicateurs
        this.indicators.forEach((indicator, index) => {
            indicator.addEventListener('click', () => this.goToItem(index));
        });
        
        // Clic sur les items
        this.items.forEach((item, index) => {
            item.addEventListener('click', () => {
                if (index !== this.currentIndex) {
                    this.goToItem(index);
                } else {
                    this.handleItemClick(item);
                }
            });
        });
        
        // Navigation au clavier
        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft') {
                e.preventDefault();
                this.previousItem();
            } else if (e.key === 'ArrowRight') {
                e.preventDefault();
                this.nextItem();
            }
        });
        
        // Touch/swipe support pour mobile
        this.setupTouchEvents();
    }
    
    setupTouchEvents() {
        let startX = 0;
        let startY = 0;
        let isTouch = false;
        
        this.gallery.addEventListener('touchstart', (e) => {
            startX = e.touches[0].clientX;
            startY = e.touches[0].clientY;
            isTouch = true;
        }, { passive: true });
        
        this.gallery.addEventListener('touchmove', (e) => {
            if (!isTouch) return;
            e.preventDefault();
        }, { passive: false });
        
        this.gallery.addEventListener('touchend', (e) => {
            if (!isTouch) return;
            
            const endX = e.changedTouches[0].clientX;
            const endY = e.changedTouches[0].clientY;
            const deltaX = endX - startX;
            const deltaY = endY - startY;
            
            // V√©rifier si c'est un swipe horizontal
            if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 50) {
                if (deltaX > 0) {
                    this.previousItem();
                } else {
                    this.nextItem();
                }
            }
            
            isTouch = false;
        }, { passive: true });
    }
    
    nextItem() {
        if (this.isAnimating) return;
        this.currentIndex = (this.currentIndex + 1) % this.totalItems;
        this.updateGallery();
    }
    
    previousItem() {
        if (this.isAnimating) return;
        this.currentIndex = (this.currentIndex - 1 + this.totalItems) % this.totalItems;
        this.updateGallery();
    }
    
    goToItem(index) {
        if (this.isAnimating || index === this.currentIndex) return;
        this.currentIndex = index;
        this.updateGallery();
    }
    
    updateGallery() {
        this.isAnimating = true;
        
        // Calculer l'angle de rotation
        const angle = -(this.currentIndex * (360 / this.totalItems));
        
        // Appliquer la rotation √† la galerie
        this.gallery.style.transform = `rotate(${angle}deg)`;
        
        // Mettre √† jour les items
        this.items.forEach((item, index) => {
            // Calculer l'angle de l'item pour le garder droit
            const itemAngle = (index * (360 / this.totalItems)) + angle;
            item.style.transform = `rotate(${-itemAngle}deg)`;
            
            // G√©rer les classes active
            item.classList.toggle('active', index === this.currentIndex);
            
            // Ajouter un effet de profondeur
            const distance = Math.abs(index - this.currentIndex);
            const minDistance = Math.min(distance, this.totalItems - distance);
            const opacity = 1 - (minDistance * 0.2);
            const scale = 1 - (minDistance * 0.1);
            
            item.style.opacity = opacity;
            if (index !== this.currentIndex) {
                item.style.transform += ` scale(${scale})`;
            }
        });
        
        // Mettre √† jour les indicateurs
        this.indicators.forEach((indicator, index) => {
            indicator.classList.toggle('active', index === this.currentIndex);
        });
        
        // Animation termin√©e
        setTimeout(() => {
            this.isAnimating = false;
        }, 800);
    }
    
    handleItemClick(item) {
        // Ajouter un effet de clic
        item.style.transform += ' scale(0.95)';
        setTimeout(() => {
            this.updateGallery();
        }, 150);
        
        // Vous pouvez ajouter ici d'autres actions (modal, zoom, etc.)
        console.log('Item cliqu√©:', item.querySelector('h3').textContent);
    }
    
    startAutoRotate() {
        this.pauseAutoRotate();
        this.autoRotateInterval = setInterval(() => {
            this.nextItem();
        }, this.autoRotateDelay);
    }
    
    pauseAutoRotate() {
        if (this.autoRotateInterval) {
            clearInterval(this.autoRotateInterval);
            this.autoRotateInterval = null;
        }
    }
    
    // M√©thode pour ajouter dynamiquement des items
    addItem(imageSrc, title, description) {
        const newItem = document.createElement('div');
        newItem.className = 'gallery-item';
        newItem.setAttribute('data-index', this.totalItems);
        
        newItem.innerHTML = `
            <img src="${imageSrc}" alt="${title}" />
            <div class="item-info">
                <h3>${title}</h3>
                <p>${description}</p>
            </div>
        `;
        
        this.gallery.appendChild(newItem);
        
        // Ajouter un indicateur
        const newIndicator = document.createElement('span');
        newIndicator.className = 'indicator';
        newIndicator.setAttribute('data-index', this.totalItems);
        document.getElementById('galleryIndicators').appendChild(newIndicator);
        
        this.totalItems++;
        this.items = document.querySelectorAll('.gallery-item');
        this.indicators = document.querySelectorAll('.indicator');
        
        // Reconfigurer les √©v√©nements
        this.setupEventListeners();
        this.repositionItems();
    }
    
    repositionItems() {
        const angleStep = 360 / this.totalItems;
        this.items.forEach((item, index) => {
            const angle = index * angleStep;
            const radian = (angle * Math.PI) / 180;
            const radius = 200; // Ajustez selon vos besoins
            
            const x = Math.sin(radian) * radius;
            const y = -Math.cos(radian) * radius;
            
            item.style.left = `calc(50% + ${x}px)`;
            item.style.top = `calc(50% + ${y}px)`;
            item.style.transform = 'translate(-50%, -50%)';
        });
    }
    
    // M√©thodes utilitaires
    getCurrentItem() {
        return this.items[this.currentIndex];
    }
    
    getTotalItems() {
        return this.totalItems;
    }
    
    getCurrentIndex() {
        return this.currentIndex;
    }
}

// Initialisation de la galerie quand le DOM est charg√©
document.addEventListener('DOMContentLoaded', () => {
    // V√©rifier si la galerie existe sur la page
    if (document.getElementById('circularGallery')) {
        const gallery = new CircularGallery();
        
        // Exposer l'instance globalement si n√©cessaire
        window.circularGallery = gallery;
        
        // Ajouter des animations d'entr√©e
        setTimeout(() => {
            document.querySelector('.circular-gallery-wrapper').style.opacity = '1';
            document.querySelector('.circular-gallery-wrapper').style.transform = 'translateY(0)';
        }, 100);
    }
});

// Fonction utilitaire pour lazy loading des images
function setupLazyLoading() {
    const images = document.querySelectorAll('.gallery-item img');
    
    const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const img = entry.target;
                img.src = img.dataset.src || img.src;
                img.classList.remove('lazy');
                observer.unobserve(img);
            }
        });
    });
    
    images.forEach(img => {
        imageObserver.observe(img);
    });
}

// Gestion du redimensionnement de la fen√™tre
window.addEventListener('resize', debounce(() => {
    if (window.circularGallery) {
        window.circularGallery.updateGallery();
    }
}, 250));

// Fonction utilitaire de debounce
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// === MENU MOBILE ===
function initializeMobileMenu() {
    const navMenu = document.querySelector('.nav-menu');
    
    if (window.innerWidth <= 768) {
        createMobileMenuButton();
    }
    
    window.addEventListener('resize', throttle(() => {
        if (window.innerWidth <= 768) {
            createMobileMenuButton();
        } else {
            removeMobileMenuButton();
        }
    }, 250));
}

function createMobileMenuButton() {
    if (document.querySelector('.mobile-menu-btn')) return;
    
    const container = document.querySelector('.header .container');
    const mobileBtn = document.createElement('button');
    mobileBtn.className = 'mobile-menu-btn';
    mobileBtn.innerHTML = '‚ò∞';
    mobileBtn.setAttribute('aria-label', 'Ouvrir le menu de navigation');
    
    container.appendChild(mobileBtn);
    
    const navMenu = document.querySelector('.nav-menu');
    navMenu.style.display = 'none';
    
    mobileBtn.addEventListener('click', () => {
        const isOpen = navMenu.style.display === 'flex';
        
        if (!isOpen) {
            navMenu.style.display = 'flex';
            navMenu.style.flexDirection = 'column';
            navMenu.style.position = 'absolute';
            navMenu.style.top = '100%';
            navMenu.style.left = '0';
            navMenu.style.right = '0';
            navMenu.style.background = 'white';
            navMenu.style.boxShadow = '0 5px 15px rgba(0,0,0,0.1)';
            navMenu.style.padding = '20px';
            navMenu.style.zIndex = '1000';
            mobileBtn.innerHTML = '‚úï';
            mobileBtn.setAttribute('aria-label', 'Fermer le menu de navigation');
        } else {
            navMenu.style.display = 'none';
            mobileBtn.innerHTML = '‚ò∞';
            mobileBtn.setAttribute('aria-label', 'Ouvrir le menu de navigation');
        }
    });
}

function removeMobileMenuButton() {
    const mobileBtn = document.querySelector('.mobile-menu-btn');
    if (mobileBtn) {
        mobileBtn.remove();
        const navMenu = document.querySelector('.nav-menu');
        navMenu.style.display = 'flex';
        navMenu.style.flexDirection = 'row';
        navMenu.style.position = 'static';
        navMenu.style.background = 'transparent';
        navMenu.style.boxShadow = 'none';
        navMenu.style.padding = '0';
    }
}

// === EFFETS PARALLAX ===
function initializeParallaxEffects() {
    const hero = document.querySelector('.hero');
    
    window.addEventListener('scroll', throttle(() => {
        const scrolled = window.pageYOffset;
        
        if (hero) {
            const speed = 0.3;
            hero.style.transform = `translateY(${scrolled * speed}px)`;
        }
        
        // Effet parallax sur les √©l√©ments flottants
        const floatingIcons = document.querySelectorAll('.floating-icon');
        floatingIcons.forEach((icon, index) => {
            const speed = 0.1 + (index % 3) * 0.05;
            const yPos = -(scrolled * speed);
            icon.style.transform = `translateY(${yPos}px) rotate(${scrolled * 0.1}deg)`;
        });
    }, 16));
}

// === ACCESSIBILIT√â ===
function initializeAccessibility() {
    // Navigation au clavier
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Tab') {
            document.body.classList.add('keyboard-navigation');
        }
    });
    
    document.addEventListener('mousedown', function() {
        document.body.classList.remove('keyboard-navigation');
    });
    
    // Focus visible pour les √©l√©ments interactifs
    const focusableElements = document.querySelectorAll(
        'a, button, input, textarea, select, [tabindex]:not([tabindex="-1"])'
    );
    
    focusableElements.forEach(element => {
        element.addEventListener('focus', function() {
            if (document.body.classList.contains('keyboard-navigation')) {
                this.style.outline = '2px solid #0082c3';
                this.style.outlineOffset = '2px';
            }
        });
        
        element.addEventListener('blur', function() {
            this.style.outline = 'none';
        });
    });
    
    // ARIA labels pour les √©l√©ments interactifs
    const realisationCards = document.querySelectorAll('.realisation-card');
    realisationCards.forEach((card, index) => {
        card.setAttribute('role', 'button');
        card.setAttribute('tabindex', '0');
        card.setAttribute('aria-label', `Voir les d√©tails de la r√©alisation ${index + 1}`);
        
        card.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                this.click();
            }
        });
    });
}

// === SMOOTH SCROLLING ===
document.addEventListener('click', function(e) {
    if (e.target.matches('a[href^="#"]')) {
        e.preventDefault();
        const target = document.querySelector(e.target.getAttribute('href'));
        if (target) {
            const headerHeight = document.querySelector('.header').offsetHeight;
            const quickNavHeight = document.querySelector('.quick-nav').offsetHeight;
            const offset = headerHeight + quickNavHeight + 20;
            
            window.scrollTo({
                top: target.offsetTop - offset,
                behavior: 'smooth'
            });
        }
    }
});

// === UTILITAIRES ===
function throttle(func, wait) {
    let timeout;
    let lastTime = 0;
    
    return function executedFunction(...args) {
        const now = Date.now();
        
        if (now - lastTime >= wait) {
            func.apply(this, args);
            lastTime = now;
        } else {
            clearTimeout(timeout);
            timeout = setTimeout(() => {
                func.apply(this, args);
                lastTime = Date.now();
            }, wait - (now - lastTime));
        }
    };
}

function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// === GESTION DES ERREURS ===
window.addEventListener('error', function(e) {
    console.error('Erreur d√©tect√©e:', e.error);
    // En production, vous pourriez envoyer l'erreur √† un service de monitoring
});

// === FONCTIONS GLOBALES (pour les boutons HTML) ===
function toggleGalleryPause() {
    if (isGalleryPaused) {
        resumeRotation();
        const btn = document.querySelector('.gallery-btn[onclick="toggleGalleryPause()"]');
        if (btn) btn.textContent = '‚è∏Ô∏è Pause';
    } else {
        pauseRotation();
        const btn = document.querySelector('.gallery-btn[onclick="toggleGalleryPause()"]');
        if (btn) btn.textContent = '‚ñ∂Ô∏è Play';
    }
}

function resetGallery() {
    gallerySpeed = 1;
    if (!isGalleryPaused) {
        startGalleryRotation();
    }
    
    const speedBtn = document.querySelector('.gallery-btn[onclick="changeSpeed()"]');
    if (speedBtn) speedBtn.textContent = '‚ö° Vitesse';
    
    const resetBtn = document.querySelector('.gallery-btn[onclick="resetGallery()"]');
    if (resetBtn) {
        resetBtn.textContent = 'üîÑ Reset';
        setTimeout(() => {
            resetBtn.textContent = 'üîÑ Reset';
        }, 1000);
    }
}

// === PERFORMANCE ET OPTIMISATION ===
function optimizePerformance() {
    // Lazy loading pour les images
    const images = document.querySelectorAll('img[data-src]');
    const imageObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const img = entry.target;
                img.src = img.dataset.src;
                img.removeAttribute('data-src');
                imageObserver.unobserve(img);
            }
        });
    });
    
    images.forEach(img => imageObserver.observe(img));
    
    // Optimisation des animations en fonction des pr√©f√©rences utilisateur
    if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
        document.documentElement.style.setProperty('--transition', 'none');
        const animatedElements = document.querySelectorAll('[style*="animation"]');
        animatedElements.forEach(el => {
            el.style.animation = 'none';
        });
    }
}

// === GESTION DU TH√àME SOMBRE (BONUS) ===
function initializeThemeToggle() {
    const themeToggle = document.createElement('button');
    themeToggle.className = 'theme-toggle';
    themeToggle.innerHTML = 'üåô';
    themeToggle.setAttribute('aria-label', 'Basculer le th√®me sombre');
    themeToggle.style.cssText = `
        position: fixed;
        top: 50%;
        right: 20px;
        transform: translateY(-50%);
        background: var(--primary-blue);
        color: white;
        border: none;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        font-size: 1.2rem;
        cursor: pointer;
        z-index: 1001;
        transition: var(--transition);
        box-shadow: 0 4px 15px rgba(0, 130, 195, 0.3);
    `;
    
    document.body.appendChild(themeToggle);
    
    // Charger le th√®me sauvegard√© (sans localStorage dans Claude.ai)
    let isDarkMode = false;
    
    themeToggle.addEventListener('click', () => {
        isDarkMode = !isDarkMode;
        toggleDarkMode(isDarkMode);
        themeToggle.innerHTML = isDarkMode ? '‚òÄÔ∏è' : 'üåô';
        themeToggle.setAttribute('aria-label', 
            isDarkMode ? 'Basculer vers le th√®me clair' : 'Basculer vers le th√®me sombre'
        );
    });
    
    themeToggle.addEventListener('mouseenter', () => {
        themeToggle.style.transform = 'translateY(-50%) scale(1.1)';
    });
    
    themeToggle.addEventListener('mouseleave', () => {
        themeToggle.style.transform = 'translateY(-50%) scale(1)';
    });
}

function toggleDarkMode(isDark) {
    const root = document.documentElement;
    
    if (isDark) {
        root.style.setProperty('--primary-blue', '#66b3ff');
        root.style.setProperty('--secondary-blue', '#4da6ff');
        root.style.setProperty('--white', '#1a1a1a');
        root.style.setProperty('--light-gray', '#2a2a2a');
        root.style.setProperty('--text-dark', '#e0e0e0');
        root.style.setProperty('--shadow', 'rgba(255, 255, 255, 0.1)');
        document.body.style.background = 'linear-gradient(-45deg, #1a1a1a, #2a2a3a, #1a2a3a, #1a1a1a)';
    } else {
        root.style.setProperty('--primary-blue', '#0082c3');
        root.style.setProperty('--secondary-blue', '#0066cc');
        root.style.setProperty('--white', '#ffffff');
        root.style.setProperty('--light-gray', '#f5f5f5');
        root.style.setProperty('--text-dark', '#333333');
        root.style.setProperty('--shadow', 'rgba(0, 0, 0, 0.1)');
        document.body.style.background = 'linear-gradient(-45deg, #ffffff, #f0f8ff, #e6f3ff, #ffffff)';
    }
}

// === NOTIFICATIONS TOAST ===
function showToast(message, type = 'info', duration = 3000) {
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    toast.textContent = message;
    
    toast.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'success' ? 'var(--green-accent)' : 
                    type === 'error' ? '#ff4444' : 'var(--primary-blue)'};
        color: white;
        padding: 15px 20px;
        border-radius: 8px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        z-index: 2001;
        opacity: 0;
        transform: translateX(100%);
        transition: all 0.3s ease;
        max-width: 300px;
        word-wrap: break-word;
    `;
    
    document.body.appendChild(toast);
    
    // Animation d'entr√©e
    setTimeout(() => {
        toast.style.opacity = '1';
        toast.style.transform = 'translateX(0)';
    }, 10);
    
    // Animation de sortie
    setTimeout(() => {
        toast.style.opacity = '0';
        toast.style.transform = 'translateX(100%)';
        
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 300);
    }, duration);
    
    // Permettre la fermeture manuelle
    toast.addEventListener('click', () => {
        toast.style.opacity = '0';
        toast.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 300);
    });
}

// === GESTION DU SCROLL FLUIDE AVANC√â ===
function initializeAdvancedScrollEffects() {
    let ticking = false;
    
    function updateScrollEffects() {
        const scrollPercent = window.scrollY / (document.documentElement.scrollHeight - window.innerHeight);
        
        // Barre de progression du scroll
        let progressBar = document.querySelector('.scroll-progress');
        if (!progressBar) {
            progressBar = document.createElement('div');
            progressBar.className = 'scroll-progress';
            progressBar.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 0%;
                height: 3px;
                background: linear-gradient(90deg, var(--primary-blue), var(--orange-accent));
                z-index: 1002;
                transition: width 0.1s ease;
            `;
            document.body.appendChild(progressBar);
        }
        
        progressBar.style.width = `${scrollPercent * 100}%`;
        
        // Effet de parallax sur les sections
        const parallaxElements = document.querySelectorAll('.content-section');
        parallaxElements.forEach((element, index) => {
            const rect = element.getBoundingClientRect();
            const speed = 0.5 + (index % 3) * 0.1;
            
            if (rect.top < window.innerHeight && rect.bottom > 0) {
                const yPos = -(window.scrollY * speed * 0.1);
                element.style.transform = `translateY(${yPos}px)`;
            }
        });
        
        ticking = false;
    }
    
    window.addEventListener('scroll', () => {
        if (!ticking) {
            requestAnimationFrame(updateScrollEffects);
            ticking = true;
        }
    });
}

// === EASTER EGGS ET INTERACTIONS CACH√âES ===
function initializeEasterEggs() {
    let konamiCode = [];
    const konamiSequence = [
        'ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown',
        'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowRight',
        'KeyB', 'KeyA'
    ];
    
    document.addEventListener('keydown', (e) => {
        konamiCode.push(e.code);
        
        if (konamiCode.length > konamiSequence.length) {
            konamiCode.shift();
        }
        
        if (JSON.stringify(konamiCode) === JSON.stringify(konamiSequence)) {
            activateEasterEgg();
            konamiCode = [];
        }
    });
    
    // Click secret sur le logo
    const logo = document.querySelector('.logo-placeholder');
    if (logo) {
        let clickCount = 0;
        logo.addEventListener('click', () => {
            clickCount++;
            if (clickCount >= 5) {
                showConfetti();
                clickCount = 0;
            }
        });
    }
}

function activateEasterEgg() {
    showToast('üéâ Code Konami activ√© ! Mode d√©veloppeur ON', 'success', 5000);
    
    // Effet sp√©cial sur toute la page
    document.body.style.animation = 'rainbow 2s ease-in-out';
    
    // Ajouter l'animation rainbow
    const style = document.createElement('style');
    style.textContent = `
        @keyframes rainbow {
            0% { filter: hue-rotate(0deg); }
            25% { filter: hue-rotate(90deg); }
            50% { filter: hue-rotate(180deg); }
            75% { filter: hue-rotate(270deg); }
            100% { filter: hue-rotate(360deg); }
        }
    `;
    document.head.appendChild(style);
    
    setTimeout(() => {
        document.body.style.animation = '';
    }, 2000);
}

function showConfetti() {
    const colors = ['#ff6600', '#0082c3', '#00cc66', '#ffcc00', '#ff3366'];
    
    for (let i = 0; i < 50; i++) {
        setTimeout(() => {
            const confetti = document.createElement('div');
            confetti.style.cssText = `
                position: fixed;
                top: -10px;
                left: ${Math.random() * 100}%;
                width: 10px;
                height: 10px;
                background: ${colors[Math.floor(Math.random() * colors.length)]};
                z-index: 2002;
                animation: confettiFall ${2 + Math.random() * 3}s linear forwards;
                transform: rotate(${Math.random() * 360}deg);
            `;
            
            document.body.appendChild(confetti);
            
            setTimeout(() => {
                if (confetti.parentNode) {
                    confetti.parentNode.removeChild(confetti);
                }
            }, 5000);
        }, i * 50);
    }
    
    // Animation de chute des confettis
    const style = document.createElement('style');
    style.textContent = `
        @keyframes confettiFall {
            to {
                transform: translateY(100vh) rotate(720deg);
                opacity: 0;
            }
        }
    `;
    document.head.appendChild(style);
}

// === INITIALISATION COMPL√àTE ===
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Initialisation de la page Mon Projet Personnel...');
    
    initializeQuickNavigation();
    initializeScrollAnimations();
    initializeStatCounters();
    initializeMobileMenu();
    initializeHeaderScroll();
    initializeRealisationCards();
    initializeCircularGallery();
    initializeModalSystem();
    initializeParallaxEffects();
    initializeAccessibility();
    
    // Nouvelles fonctionnalit√©s
    optimizePerformance();
    initializeThemeToggle();
    initializeAdvancedScrollEffects();
    initializeEasterEggs();
    
    console.log('‚úÖ Page initialis√©e avec succ√®s !');
    
    // Message de bienvenue
    setTimeout(() => {
        showToast('üéØ Bienvenue sur mon projet personnel !', 'success', 4000);
    }, 1000);
});

// === NETTOYAGE ET OPTIMISATION M√âMOIRE ===
window.addEventListener('beforeunload', function() {
    // Nettoyage des event listeners et des timers
    const galleryOrbits = document.querySelectorAll('.gallery-orbit');
    galleryOrbits.forEach(orbit => {
        orbit.style.animation = 'none';
    });
    
    // Suppression des toasts actifs
    const toasts = document.querySelectorAll('.toast');
    toasts.forEach(toast => {
        if (toast.parentNode) {
            toast.parentNode.removeChild(toast);
        }
    });
    
    console.log('üßπ Nettoyage effectu√© avant fermeture');
});
